// <auto-generated />
using System;
using Ascendix_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ascendix_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250921222958_UserModule-addition")]
    partial class UserModuleaddition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ascendix_Backend.Models.Certificate", b =>
                {
                    b.Property<Guid>("certificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("metaDataUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("certificateId");

                    b.HasIndex("courseId");

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Course", b =>
                {
                    b.Property<Guid>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("libraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("tokenAllocation")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("courseId");

                    b.HasIndex("libraryId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.CourseTag", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("tagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.HasIndex("courseId");

                    b.HasIndex("tagId");

                    b.ToTable("courseTags");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.LeaderBoard", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("earnings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("leaderBoards");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Library", b =>
                {
                    b.Property<Guid>("libraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("libraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("libraryId");

                    b.ToTable("library");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Module", b =>
                {
                    b.Property<Guid>("moduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("moduleId");

                    b.HasIndex("courseId");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.ModuleQuiz", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("moduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("moduleQuizzes");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Quest", b =>
                {
                    b.Property<Guid>("questId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("tokenAllocation")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("questId");

                    b.ToTable("quests");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuestionOptions", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("optionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("questionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("quizQuestionsid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("quizQuestionsid");

                    b.ToTable("questionOptions");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuizQuestions", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("moduleQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("questionScore")
                        .HasColumnType("int");

                    b.Property<string>("questionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("questionType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("moduleQuizId");

                    b.ToTable("quizQuestions");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Tag", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("totalPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("walletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserAnswer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("questionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("questionOptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userQuizAttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("questionId");

                    b.HasIndex("questionOptionsId");

                    b.HasIndex("userQuizAttemptId");

                    b.ToTable("userAnswers");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserCertificate", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("certificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("issuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("certificateId");

                    b.HasIndex("userId");

                    b.ToTable("userCertificates");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserCourseProgress", b =>
                {
                    b.Property<Guid>("progressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("completedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("progressPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("progressId");

                    b.HasIndex("courseId");

                    b.HasIndex("userId");

                    b.ToTable("userCourseProgresses");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserModule", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("moduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("progressPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.HasIndex("userId");

                    b.ToTable("userModules");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserQuest", b =>
                {
                    b.Property<Guid>("userQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("completedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("questId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("userQuestId");

                    b.HasIndex("questId")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("userQuest");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserQuizAttempt", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("moduleQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("moduleQuizId");

                    b.HasIndex("userId");

                    b.ToTable("userQuizAttempts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e3b7f81-d707-44f5-9aa4-1c6ff5d1a3c9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c76c2e6f-795c-415d-a9f7-381443b41dce",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Certificate", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Course", "course")
                        .WithMany("certificates")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Course", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Library", "library")
                        .WithMany("courses")
                        .HasForeignKey("libraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("library");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.CourseTag", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.User", null)
                        .WithMany("courseTags")
                        .HasForeignKey("UserId");

                    b.HasOne("Ascendix_Backend.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.Tag", "tag")
                        .WithMany("courseTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.LeaderBoard", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany("leaderBoards")
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Module", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Course", "course")
                        .WithMany("modules")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.ModuleQuiz", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Module", "module")
                        .WithMany("moduleQuizzes")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("module");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuestionOptions", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.QuizQuestions", "quizQuestions")
                        .WithMany("options")
                        .HasForeignKey("quizQuestionsid");

                    b.Navigation("quizQuestions");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuizQuestions", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.ModuleQuiz", "moduleQuiz")
                        .WithMany("quizQuestions")
                        .HasForeignKey("moduleQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moduleQuiz");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserAnswer", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.QuizQuestions", "question")
                        .WithMany("answers")
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.QuestionOptions", "options")
                        .WithMany("userAnswers")
                        .HasForeignKey("questionOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.UserQuizAttempt", "attempt")
                        .WithMany("userAnswers")
                        .HasForeignKey("userQuizAttemptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("attempt");

                    b.Navigation("options");

                    b.Navigation("question");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserCertificate", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Certificate", "certificate")
                        .WithMany("userCertificates")
                        .HasForeignKey("certificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany("userCertificates")
                        .HasForeignKey("userId");

                    b.Navigation("certificate");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserCourseProgress", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Course", "course")
                        .WithMany("userCourseProgresses")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany("userCourseProgresses")
                        .HasForeignKey("userId");

                    b.Navigation("course");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserModule", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Module", "modules")
                        .WithMany()
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("modules");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserQuest", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.Quest", "quest")
                        .WithOne("userQuest")
                        .HasForeignKey("Ascendix_Backend.Models.UserQuest", "questId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany("userQuests")
                        .HasForeignKey("userId");

                    b.Navigation("quest");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserQuizAttempt", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.ModuleQuiz", "moduleQuiz")
                        .WithMany("attempts")
                        .HasForeignKey("moduleQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", "user")
                        .WithMany("attempts")
                        .HasForeignKey("userId");

                    b.Navigation("moduleQuiz");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ascendix_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ascendix_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Certificate", b =>
                {
                    b.Navigation("userCertificates");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Course", b =>
                {
                    b.Navigation("certificates");

                    b.Navigation("modules");

                    b.Navigation("userCourseProgresses");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Library", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Module", b =>
                {
                    b.Navigation("moduleQuizzes");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.ModuleQuiz", b =>
                {
                    b.Navigation("attempts");

                    b.Navigation("quizQuestions");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Quest", b =>
                {
                    b.Navigation("userQuest");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuestionOptions", b =>
                {
                    b.Navigation("userAnswers");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.QuizQuestions", b =>
                {
                    b.Navigation("answers");

                    b.Navigation("options");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.Tag", b =>
                {
                    b.Navigation("courseTags");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.User", b =>
                {
                    b.Navigation("attempts");

                    b.Navigation("courseTags");

                    b.Navigation("leaderBoards");

                    b.Navigation("userCertificates");

                    b.Navigation("userCourseProgresses");

                    b.Navigation("userQuests");
                });

            modelBuilder.Entity("Ascendix_Backend.Models.UserQuizAttempt", b =>
                {
                    b.Navigation("userAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
